import subprocess
import os
import shutil
import zipfile
import datetime
import re
import time

PROJECT_NAME = "WhisperGUI_RUS"
MAIN_SCRIPT = "main.py"
DIST_DIR = "dist_builds"
LOG_FILE = "build_log.txt"
CHANGELOG_FILE = "CHANGELOG.md"

def extract_version():
    with open(CHANGELOG_FILE, 'r', encoding='utf-8') as f:
        content = f.read()
    match = re.search(r'\[(\d+\.\d+\.\d+)\]', content)
    if match:
        return match.group(1)
    return "0.0.0"

def log(message):
    timestamp = datetime.datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    log_message = f"{timestamp} {message}"
    print(log_message)
    with open(LOG_FILE, 'a', encoding='utf-8') as log_file:
        log_file.write(log_message + '\n')

def build_exe():
    version = extract_version()
    date_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    build_name = f"{PROJECT_NAME}_v{version}_{date_time}"
    build_path = os.path.join(DIST_DIR, build_name)

    log("üöß –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏...")
    subprocess.run([
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name", PROJECT_NAME,
        MAIN_SCRIPT
    ], check=True)

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º EXE –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å–±–æ—Ä–∫–∏
    if not os.path.exists(build_path):
        os.makedirs(build_path)
    shutil.move(f"dist/{PROJECT_NAME}.exe", f"{build_path}/{PROJECT_NAME}.exe")

    # –°–æ–∑–¥–∞—ë–º ZIP
    zip_name = f"{build_path}.zip"
    with zipfile.ZipFile(zip_name, 'w') as zipf:
        zipf.write(f"{build_path}/{PROJECT_NAME}.exe", f"{PROJECT_NAME}.exe")

    log(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—É—Ç—å: {build_path}")
    log(f"üì¶ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {zip_name}")

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cleanup(build_path)

    # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
    auto_run_exe(f"{build_path}/{PROJECT_NAME}.exe")

def cleanup(path):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if os.path.exists(path):
                shutil.rmtree(path)
            print(f"‚ôªÔ∏è –£–¥–∞–ª–µ–Ω–æ: {path}")
            break
        except PermissionError as e:
            print(f"‚ö†Ô∏è –§–∞–π–ª –∑–∞–Ω—è—Ç ({e}), –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}...")
            time.sleep(5)  # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}. –£–¥–∞–ª–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ–∑–∂–µ.")

    log("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def auto_run_exe(exe_path):
    log(f"üß™ –ó–∞–ø—É—Å–∫ {exe_path}...")
    subprocess.Popen(exe_path, shell=True)
    log("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ.")

if __name__ == "__main__":
    build_exe()
