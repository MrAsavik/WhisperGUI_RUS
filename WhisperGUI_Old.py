import os
import re
import subprocess
import threading
import time
import customtkinter as ctk
from tkinter import filedialog, messagebox, scrolledtext
from pydub.utils import mediainfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
ctk.set_appearance_mode("dark")  # –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
ctk.set_default_color_theme("blue")

class WhisperGUI(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Whisper GUI")
        self.geometry("700x700")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.selected_files = []
        self.whisper_process = None
        self.duration = 1  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.progress_var = ctk.DoubleVar()
        self.estimated_time_var = ctk.StringVar(value="–û–∂–∏–¥–∞–Ω–∏–µ...")
        self.current_file_var = ctk.StringVar(value="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.model_var = ctk.StringVar(value="small")
        self.language_var = ctk.StringVar(value="Russian")
        self.output_dir = os.getcwd()
        self.output_formats = ["txt", "srt"]
        self.overwrite_existing = ctk.BooleanVar(value=False)
        self.start_time = 0

        self.create_widgets()
        self.bind("<Destroy>", lambda e: self.on_close())

    def on_close(self):
        if self.whisper_process and self.whisper_process.poll() is None:
            self.whisper_process.terminate()
        self.destroy()

    def create_widgets(self):
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
        self.file_label = ctk.CTkLabel(self, text="–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        self.file_label.pack(pady=10)

        self.select_button = ctk.CTkButton(self, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", command=self.select_files)
        self.select_button.pack(pady=5)

        self.process_button = ctk.CTkButton(self, text="–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å", command=self.process_files, state="disabled")
        self.process_button.pack(pady=5)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(self, variable=self.progress_var, width=400)
        self.progress_bar.pack(pady=10)
        self.progress_var.set(0)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(self, textvariable=self.estimated_time_var, font=('Arial', 12, 'bold'))
        self.status_label.pack(pady=10)

        # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        self.current_file_label = ctk.CTkLabel(self, textvariable=self.current_file_var, font=('Arial', 10))
        self.current_file_label.pack(pady=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏ —è–∑—ã–∫–∞
        ctk.CTkLabel(self, text="–ú–æ–¥–µ–ª—å:").pack()
        self.model_menu = ctk.CTkOptionMenu(self, values=["small", "medium", "large"], variable=self.model_var)
        self.model_menu.pack(pady=5)

        ctk.CTkLabel(self, text="–Ø–∑—ã–∫:").pack()
        self.language_menu = ctk.CTkOptionMenu(self, values=["Russian", "English"], variable=self.language_var)
        self.language_menu.pack(pady=5)

        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.select_folder_button = ctk.CTkButton(self, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", command=self.select_folder)
        self.select_folder_button.pack(pady=5)

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.overwrite_checkbox = ctk.CTkCheckBox(self, text="–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —É–∂–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", variable=self.overwrite_existing)
        self.overwrite_checkbox.pack(pady=10)

        # –ü–æ–ª–µ –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(self, wrap='word', width=80, height=10, state='disabled')
        self.log_text.pack(pady=10)

    def select_files(self):
        files = filedialog.askopenfilenames(
            filetypes=[("–ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ", "*.wav *.mp3 *.mp4 *.mkv")])
        if files:
            self.selected_files = list(files)
            self.file_label.configure(text=f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.selected_files)}")
            self.current_file_var.set(f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {os.path.basename(self.selected_files[0])}")
            self.process_button.configure(state="normal")

    def select_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_dir = folder
            self.log(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.output_dir}")

    def log(self, message: str):
        self.log_text.configure(state='normal')
        self.log_text.insert('end', f"{message}\n")
        self.log_text.configure(state='disabled')
        self.log_text.yview('end')

if __name__ == '__main__':
    app = WhisperGUI()
    app.mainloop()
