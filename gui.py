import customtkinter as ctk
import threading
import os
from tkinter import filedialog, messagebox
import psutil

from cli_handler import process_files_cli
from config import DEFAULT_MODEL, DEFAULT_LANGUAGE, OUTPUT_FORMATS
from power import prevent_sleep, allow_sleep

from ui import build_ui
from monitor import start_cpu_monitor
from log_utils import log, dev_log
from ui_utils import bind_copy
from handlers import kill_process_tree
from updater import CURRENT_VERSION



class WhisperGUI(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Whisper GUI –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π")
        self.geometry("900x700")
        self.protocol("WM_DELETE_WINDOW", self.on_close)

        # üß† –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.selected_files = []
        self.output_dir = ""
        self.current_process = None

        self.model_var = ctk.StringVar(value=DEFAULT_MODEL)
        self.language_var = ctk.StringVar(value=DEFAULT_LANGUAGE)
        self.selected_formats = {fmt: ctk.BooleanVar(value=True) for fmt in OUTPUT_FORMATS}
        self.turbo_var = ctk.BooleanVar(value=False)
        self.progress_var = ctk.DoubleVar()
        self.log_messages = []
        

        # üì¶ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        build_ui(self)
        # –≤–Ω–∏–∑—É –ø—Ä–∞–≤–æ–≥–æ —É–≥–ª–∞ ‚Äî –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.version_label = ctk.CTkLabel(
            self,
            text=f"v{CURRENT_VERSION}",
            text_color="gray",
            fg_color=None
        )
        self.version_label.place(
            relx=1.0, rely=1.0,    # –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –æ–∫–Ω–∞
            x=-10, y=-10,          # –æ—Ç—Å—Ç—É–ø 10px –æ—Ç –≥—Ä–∞–Ω–∏—Ü
            anchor="se"            # South-East (—é–≥–æ-–≤–æ—Å—Ç–æ–∫)
        )


    def clear_file_list(self):
        self.selected_files.clear()
        self.file_label.configure(text="–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        self.process_button.configure(state="disabled")
        log(self, "üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω.")

    def select_files(self):
        files = filedialog.askopenfilenames(filetypes=[("–ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ", "*.wav *.mp3 *.mp4 *.mkv *.m4a *.aac *.ogg")])
        if files:
            added = 0
            for f in files:
                if not os.path.exists(f):
                    log(self, f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                    continue
                if f not in self.selected_files:
                    self.selected_files.append(f)
                    added += 1


            self.file_label.configure(text=f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.selected_files)}")
            self.process_button.configure(state="normal")
            log(self, f"üìå –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}")
            for path in files:
                log(self, f"  ‚û§ {os.path.basename(path)} ({os.path.dirname(path)})")

    def select_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_dir = folder
            log(self, f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞–Ω–∞: {self.output_dir}")

    def process_files(self):
        
        if self.selected_files:
            self.progress_var.set(0)
            self.process_button.configure(state="disabled")
            self.stop_button.configure(state="normal")
            threading.Thread(target=self.run_processing, daemon=True).start()

    def run_processing(self):
        model = self.model_var.get()
        language = self.language_var.get().lower()
        formats = [fmt for fmt, var in self.selected_formats.items() if var.get()]
        threads = os.cpu_count() if self.turbo_var.get() else None

        try:
            cpu_load = psutil.cpu_percent(interval=1)
            if cpu_load > 90:
                log(self, f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU ({cpu_load}%).")

            prevent_sleep()
            log(self, "üîã –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            log(self, "üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")
            if threads:
                log(self, f"üöÄ Turbo-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω: –ø–æ—Ç–æ–∫–æ–≤ = {threads}")

            self.current_process = process_files_cli(
                self.selected_files,
                model=model,
                language=language,
                formats=formats,
                threads=threads
            )

            start_cpu_monitor(self)

            for line in self.current_process.stdout:
                line = line.strip()
                dev_log(self, line)
                if "–û—à–∏–±–∫–∞" in line or "error" in line.lower():
                    log(self, "‚ùå " + line)
                elif "Transcribing" in line or "Saved" in line:
                    log(self, "üìÑ " + line)

            process = self.current_process
            self.current_process = None
            if process:
                process.wait()
                if process.returncode != 0:
                    log(self, f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode})")
                log(self, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            log(self, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.process_button.configure(state="normal")
            self.stop_button.configure(state="disabled")
            self.progress_var.set(1.0)
            allow_sleep()
            log(self, "üåô –°–æ–Ω —Å–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω.")

    def stop_process(self):
        if self.current_process:
            pid = self.current_process.pid
            kill_process_tree(pid)
            log(self, "üõë –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            self.current_process = None
        else:
            log(self, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

    def on_close(self):
        if self.current_process:
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "üöß –ò–¥—ë—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ.\n–í—ã–π—Ç–∏ –∏ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å?"):
                return
            else:
                self.stop_process()
        log(self, "–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.destroy()


if __name__ == "__main__":
    app = WhisperGUI()
    app.mainloop()
