import customtkinter as ctk
import threading
from tkinter import filedialog, scrolledtext
from cli_handler import process_files_cli
from config import DEFAULT_MODEL, DEFAULT_LANGUAGE, OUTPUT_FORMATS
import os



class WhisperGUI(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.current_process = None

        
        self.title("Whisper GUI –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π")
        self.geometry("900x700")
        self.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        self.selected_files = []
        self.output_dir = ""
        self.model_var = ctk.StringVar(value=DEFAULT_MODEL)
        self.language_var = ctk.StringVar(value=DEFAULT_LANGUAGE)
        self.selected_formats = {fmt: ctk.BooleanVar(value=True) for fmt in OUTPUT_FORMATS}
        self.progress_var = ctk.DoubleVar()
        self.log_messages = []

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

    def create_widgets(self):
        """–°–æ–∑–¥–∞—ë—Ç –≤–∫–ª–∞–¥–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(expand=True, fill='both')
        
        self.main_tab = self.tabview.add("–ì–ª–∞–≤–Ω–∞—è")
        self.settings_tab = self.tabview.add("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.clear_files_button = ctk.CTkButton(self.main_tab, text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", command=self.clear_file_list)
        self.clear_files_button.pack(pady=5)

        self.create_main_tab()
        self.create_settings_tab()

    def create_main_tab(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ì–ª–∞–≤–Ω–∞—è."""
        self.file_label = ctk.CTkLabel(self.main_tab, text="–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        self.file_label.pack(pady=10)
        
        self.select_button = ctk.CTkButton(self.main_tab, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", command=self.select_files)
        self.select_button.pack(pady=5)
        
        self.process_button = ctk.CTkButton(self.main_tab, text="–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å", command=self.process_files, state="disabled")
        self.process_button.pack(pady=5)
        
        self.stop_button = ctk.CTkButton(self.main_tab, text="–°—Ç–æ–ø", command=self.stop_process, fg_color="red", state="disabled")
        self.stop_button.pack(pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(self.main_tab, variable=self.progress_var, width=400)
        self.progress_bar.pack(pady=10)
        self.progress_var.set(0)

        self.log_text = scrolledtext.ScrolledText(self.main_tab, wrap='word', width=80, height=10)
        self.log_text.pack(pady=10)
        
        self.clear_log_button = ctk.CTkButton(self.main_tab, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log)
        self.clear_log_button.pack(pady=5)
        
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏."""
        ctk.CTkLabel(self.settings_tab, text="–ú–æ–¥–µ–ª—å Whisper:").pack(pady=5)
        ctk.CTkOptionMenu(self.settings_tab, values=["tiny", "small", "medium", "large"], variable=self.model_var).pack()

        ctk.CTkLabel(self.settings_tab, text="–Ø–∑—ã–∫:").pack(pady=5)
        ctk.CTkOptionMenu(self.settings_tab, values=["Russian", "English", "Auto"], variable=self.language_var).pack()

        ctk.CTkLabel(self.settings_tab, text="–§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞:").pack(pady=5)
        for fmt, var in self.selected_formats.items():
            ctk.CTkCheckBox(self.settings_tab, text=f"{fmt.upper()} —Ñ–æ—Ä–º–∞—Ç", variable=var).pack(anchor='w', padx=20)

        ctk.CTkButton(self.settings_tab, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", command=self.select_folder).pack(pady=10)

    def clear_file_list(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        self.selected_files.clear()
        self.file_label.configure(text="–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        self.process_button.configure(state="disabled")
        self.log("üóëÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω.")


    def select_files(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ ‚Äî –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä."""
        files = filedialog.askopenfilenames(
            filetypes=[("–ê—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ", "*.wav *.mp3 *.mp4 *.mkv *.m4a *.aac *.ogg")]
        )
        if files:
            new_files = list(files)
            added = 0
            for f in new_files:
                if f not in self.selected_files:
                    self.selected_files.append(f)
                    added += 1
            self.file_label.configure(text=f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.selected_files)}")
            self.process_button.configure(state="normal")
            self.log(f"üìå –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}")
            for path in new_files:
                self.log(f"  ‚û§ {os.path.basename(path)} ({os.path.dirname(path)})")
    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞—Ç—å –µ—ë)."""
        folder = filedialog.askdirectory()
        if folder:
            self.output_dir = folder
            self.log(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞–Ω–∞: {self.output_dir}")


    def process_files(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.selected_files:
            self.progress_var.set(0)
            self.process_button.configure(state="disabled")
            self.stop_button.configure(state="normal")

            thread = threading.Thread(target=self.run_processing)
            thread.start()

    def run_processing(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ GUI."""
        def update_progress(value):
            self.progress_var.set(value)

        # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GUI
        model = self.model_var.get()
        language = self.language_var.get().lower()
        formats = [fmt for fmt, var in self.selected_formats.items() if var.get()]

        try:
            self.log("üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")

            self.current_process = process_files_cli(
                self.selected_files,
                model=self.model_var.get(),
                language=self.language_var.get(),
                formats=[fmt for fmt, var in self.selected_formats.items() if var.get()]
            )

            for line in self.current_process.stdout:
                line = line.strip()
                self.log(line)
                self.update()

            self.current_process.wait()
            self.current_process = None

            self.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.process_button.configure(state="normal")
            self.stop_button.configure(state="disabled")
            self.progress_var.set(1.0)



    def stop_process(self):
        if self.current_process:
            self.current_process.terminate()
            self.log("üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            self.current_process = None
        else:
            self.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.")


    def log(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ –≤ GUI."""
        self.log_messages.append(message)
        self.log_text.insert('end', message + "\n")
        self.log_text.yview('end')

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –æ–∫–Ω–æ –ª–æ–≥–æ–≤."""
        self.log_messages.clear()
        self.log_text.delete(1.0, 'end')

    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤."""
        self.log("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self.destroy()

if __name__ == "__main__":
    app = WhisperGUI()
    app.mainloop()
